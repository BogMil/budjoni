@page "/model/create"
@layout FullScreenLayout
@using Budjoni.DAL
@using Budjoni.DAL.Models
@using BlazorInputFile
@using System.IO
@inject NavigationManager NavigationManager
@inject ApplicationDbContext Db
@inject ModelService ModelService





<div class="mat-layout-grid" style="padding:0">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
            <MatButton OnClick="Back"> <span class="oi oi-chevron-left" aria-hidden="true"></span></MatButton>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5">
            <MatStringField Label="Naziv modela" Style="width:100%" @bind-Value="@model.NazivModela" />
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">

            <MatStringField Label="Sifra" @bind-Value="@model.Sifra" />
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12" style="text-align: center">
            <MatButton OnClick="@DodajBoju"><span class="oi oi-plus" aria-hidden="true" /> &nbsp; Dodaj boju modela</MatButton>
        </div>

        @foreach (var bojaModela in model.BojeModela)
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4" @onclick="()=>OnBojaModelaCardClick(bojaModela)"
                 style="border-style: solid; border-color: rgb(98, 0, 238); border-width: 2px">
                <MatCard class="demo-mat-card">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                            <MatStringField Label="Naziv boje" Style="width:100%" @bind-Value="@bojaModela.NazivBoje" />
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2" style="text-align: right">
                            <MatButton OnClick="()=>IzbrisiBoju(bojaModela)"><span class="oi oi-x" aria-hidden="true" /></MatButton>
                        </div>
                    </div>
                    @if (bojaModela.SlikaByteArray != null)
                    {
                        <MatCardContent>
                            <div >
                                <img src="@bojaModela.GetImageSrc()" style="width:100%" />
                            </div>
                        </MatCardContent>
                    }
                    <MatCardActions>
                        <div style="text-align: center">
                            <MatFileUpload OnChange="@HandleFileSelected" Label="slika"></MatFileUpload>
                        </div>
                    </MatCardActions>
                </MatCard>
                <MatCard class="demo-mat-card">
                    <MatCardContent>
                        <MatButton OnClick="@OpenDodajVelicinuDialog"><span class="oi oi-plus" aria-hidden="true" /> &nbsp; Dodaj novu velicinu</MatButton>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>velicina</th>
                                    <th>Stanje</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var velicinaModela in bojaModela.VelicineModela)
                                {
                                    <tr style="@(velicinaModela.KolicinaNaStanju <= 0 ? "background-color:red":"")">
                                        <td style="padding: 0; text-align: center">@velicinaModela.Velicina</td>
                                        <td style="padding:0">
                                            <input @bind="@velicinaModela.KolicinaNaStanju" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </MatCardContent>
                </MatCard>
            </div>
        }



    </div>
    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12" style="text-align: center">
        <MatButton OnClick="Back">Odustani</MatButton>
        <MatButton OnClick="Submit">Sacuvaj</MatButton>
    </div>

</div>



<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogContent>
        <MatTextField @bind-Value="@novaVelicina" Dense="true" Label="velicina"></MatTextField>
        <MatTextField @bind-Value="@novaKolicina"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">No Thanks</MatButton>
        <MatButton OnClick="@DodajVelicinu">OK</MatButton>
    </MatDialogActions>
</MatDialog>



@code {
    private Model model;
    string novaVelicina = null;
    int novaKolicina = 0;
    bool dialogIsOpen = false;
    string imageUrl;
    BojaModela selektovanaBojaModela = null;

    void OnBojaModelaCardClick(BojaModela bojaModela)
    {
        selektovanaBojaModela = bojaModela;
    }

    void OpenDodajVelicinuDialog()
    {
        dialogIsOpen = true;
    }

    void DodajVelicinu()
    {
        selektovanaBojaModela.VelicineModela.Add(new VelicinaModela() { Velicina = novaVelicina, KolicinaNaStanju = novaKolicina });
        novaVelicina = null;
        novaKolicina = 0;
        dialogIsOpen = false;
    }

    void DodajBoju()
    {
        model.BojeModela.Add(ModelService.GetNovaBojaModela());
    }

    void IzbrisiBoju(BojaModela bojaModela)
    {
        model.BojeModela.Remove(bojaModela);
    }

    void Back()=>NavigationManager.NavigateTo("/model");
    

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            model = new Model
            {
                BojeModela = new List<BojaModela>()
            };
        });
    }

    async void HandleFileSelected(IMatFileUploadEntry[] files)
    {
        var file = files.FirstOrDefault();
        MemoryStream stream = new MemoryStream();
        await file.WriteToStreamAsync(stream);
        selektovanaBojaModela.SlikaByteArray = stream.ToArray();
        StateHasChanged();
    }

    public async Task<byte[]> StreamToByteArray(Stream input)
    {
        try
        {
            byte[] buffer = new byte[16 * 1024];
            await using MemoryStream ms = new MemoryStream();
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
        catch (Exception e)
        {
            var x = e.Message;
            return null;
        }
    }

    void Submit()
    {
        ModelService.Create(model);
        NavigationManager.NavigateTo("/model");
    } }
