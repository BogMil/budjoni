@page "/model/create"
@using Budjoni.DAL
@using Budjoni.DAL.Models
@using BlazorInputFile
@using System.IO
@inject NavigationManager NavigationManager
@inject ApplicationDbContext Db
@inject ModelObuceService ModelObuceService



<EditForm Model="@modelObuce">

    <p>
        <label>
            <MatH6>
                Naziv modela:
                <InputText Style="width:100%" @bind-Value="@modelObuce.NazivModela" />
            </MatH6>

        </label>
    </p>
    <p>
        <div class="mat-layout-grid" style="padding:0">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                    <MatCard class="demo-mat-card">
                        <MatCardContent>
                            <div class="demo-mat-card-content">
                                <img src="@imageUrl" />
                            </div>
                        </MatCardContent>
                        <MatCardActions>

                            <InputFile OnChange="HandleFileSelected"  />
                        </MatCardActions>
                    </MatCard>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6"></div>

                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                    <MatCard class="demo-mat-card">
                        <MatCardContent>
                            <h4>
                                Dodaj novu velicinu <button @onclick="OpenDialog">
                                    <span class="oi oi-plus" aria-hidden="true"></span>
                                </button>
                            </h4>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>velicina</th>
                                        <th>Stanje</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var velicinaModela in modelObuce.VelicineModela)
                                    {
                                        <tr>
                                            <td style="padding:0">@velicinaModela.Velicina</td>
                                            <td style="padding:0">
                                                <InputNumber @bind-Value="@velicinaModela.KolicinaNaStanju" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </MatCardContent>
                    </MatCard>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6"></div>

            </div>


        </div>

    </p>

    <button @onclick="Submit">Sacuvaj</button>

    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogContent>
            <MatTextField @bind-Value="@novaVelicina" Dense="true" Label="velicina"></MatTextField>
            <MatTextField @bind-Value="@novaKolicina"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogIsOpen = false; })">No Thanks</MatButton>
            <MatButton OnClick="@DodajVelicinu">OK</MatButton>
        </MatDialogActions>
    </MatDialog>

</EditForm>


@code { private ModelObuce modelObuce;
    string novaVelicina = null;
    int novaKolicina = 0;
    bool dialogIsOpen = false;
    string imageUrl;

    void OpenDialog()
    {
        dialogIsOpen = true;
    }

    void DodajVelicinu()
    {
        modelObuce.VelicineModela.Add(new VelicinaModela() { Velicina = novaVelicina, KolicinaNaStanju = novaKolicina });
        novaVelicina = null;
        novaKolicina = 0;
        dialogIsOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            modelObuce = new ModelObuce
            {
                VelicineModela = new List<VelicinaModela>()
                    {
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "36"},
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "37"},
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "38"},
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "39"},
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "40"},
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "41"},
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "43"},
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "44"},
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "45"},
                new VelicinaModela(){KolicinaNaStanju = 0,Velicina = "46"},

                                                }
            };
        });
    }

    IFileListEntry file;

    async void HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        modelObuce.SlikaByteArray = await StreamToByteArray(file.Data);
        imageUrl = modelObuce.GetImageSrc();
        StateHasChanged();
    }

    public async Task<byte[]> StreamToByteArray(Stream input)
    {
        try
        {
            byte[] buffer = new byte[16 * 1024];
            await using MemoryStream ms = new MemoryStream();
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
        catch (Exception e)
        {
            var x = e.Message;
            return null;
        }
    }

    void Submit()
    {
        ModelObuceService.Create(modelObuce);
        NavigationManager.NavigateTo("/model");
    } }
