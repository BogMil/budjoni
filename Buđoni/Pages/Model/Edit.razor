@*@page "/model/edit/{Id}"
@using Budjoni.DAL
@using Budjoni.DAL.Models
@using BlazorInputFile
@using System.IO
@inject NavigationManager NavigationManager
@inject ApplicationDbContext Db



<div class="mat-layout-grid" style="padding:0">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            <MatStringField Label="Naziv modela" Style="width:100%" @bind-Value="@modelObuce.NazivModela" />
            <MatStringField Label="Sifra" @bind-Value="@modelObuce.Sifra" />
            <MatCard class="demo-mat-card">
                @if (modelObuce.SlikaByteArray != null)
                {
                    <MatCardContent>
                        <div class="demo-mat-card-content">
                            <img src="@imageUrl" />
                        </div>
                    </MatCardContent>
                }
                <MatCardActions>

                    <InputFile OnChange="HandleFileSelected" />
                </MatCardActions>
            </MatCard>
        </div>


        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            <MatCard class="demo-mat-card">
                <MatCardContent>
                    <h4>
                        Dodaj novu velicinu <button @onclick="OpenDialog">
                            <span class="oi oi-plus" aria-hidden="true"></span>
                        </button>
                    </h4>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>velicina</th>
                                <th>Stanje</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var velicinaModela in modelObuce.VelicineModela)
                            {
                                <tr>
                                    <td style="padding:0">@velicinaModela.Velicina</td>
                                    <td style="padding:0">
                                        <MatTextField style="width:100%" Label="Otkup" @bind-Value="@velicinaModela.KolicinaNaStanju" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </MatCardContent>
            </MatCard>
        </div>
    </div>
    <button @onclick="Submit">Sacuvaj</button>
    <button>
        <NavLink class="nav-link" href="@{"model"}">
            Odustani
        </NavLink>
    </button>

</div>

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogContent>
        <MatTextField @bind-Value="@novaVelicina" Dense="true" Label="velicina"></MatTextField>
        <MatTextField @bind-Value="@novaKolicina"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">No Thanks</MatButton>
        <MatButton OnClick="@DodajVelicinu">OK</MatButton>
    </MatDialogActions>
</MatDialog>


@code { [Parameter]
    public string Id { get; set; }

    private Model modelObuce = new Model { VelicineModela = new List<VelicinaModela>() };
    string novaVelicina = null;
    int novaKolicina = 0;
    bool dialogIsOpen = false;
    string imageUrl;

    void OpenDialog()
    {
        dialogIsOpen = true;
    }

    void DodajVelicinu()
    {
        modelObuce.VelicineModela.Add(new VelicinaModela() { Velicina = novaVelicina, KolicinaNaStanju = novaKolicina });
        novaVelicina = null;
        novaKolicina = 0;
        dialogIsOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        modelObuce = await Db.Modeli.FindAsync(int.Parse(Id));
        imageUrl = modelObuce.GetImageSrc();
        StateHasChanged();
    }

    IFileListEntry file;

    async void HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        modelObuce.SlikaByteArray = await StreamToByteArray(file.Data);
        imageUrl = modelObuce.GetImageSrc();
        StateHasChanged();
    }

    public async Task<byte[]> StreamToByteArray(Stream input)
    {
        try
        {
            byte[] buffer = new byte[16 * 1024];
            using (MemoryStream ms = new MemoryStream())
            {
                int read;
                while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
                {
                    ms.Write(buffer, 0, read);
                }
                return ms.ToArray();
            }
        }
        catch (Exception e)
        {
            var x = e.Message;
            return null;
        }
    }

    void Submit()
    {
        Db.ModeliObuce.Update(modelObuce);
        Db.SaveChanges();
        NavigationManager.NavigateTo("/model");
    } }*@
